/* 
1. 일반 속성 관계
2.  HAVING
3. PLAYER 테이블에서 선수영문명 2번째 글자가 A인 선수의 한국 이름과 영문명을 출력
4. 3
5. 인라인뷰
*/
/* 6 */
CREATE TABLE department(
    DEPTID NUMBER(10) PRIMARY KEY,
    DEPTNAME VARCHAR2(10),
    LOCATION VARCHAR2(10),
    TEL VARCHAR2(15));
    
DESC department;

CREATE TABLE EMPLOYEE(
    EMPID NUMBER(10) PRIMARY KEY,
    EMPNAME VARCHAR2(10),
    HIREDATE DATE,
    ADDR VARCHAR2(12),
    TEL VARCHAR2(15),
    DEPTID  REFERENCES DEPARTMENT(DEPTID));
    
DESC EMPLOYEE;

/* 7 */
ALTER TABLE EMPLOYEE ADD BIRTHDAY DATE;

DESC EMPLOYEE;

/* 8 */
INSERT INTO DEPARTMENT VALUES (1001, '총무팀', '본101호', '053-777-8777');
INSERT INTO DEPARTMENT VALUES (1002, '회계팀', '본102호', '053-888-9999');
INSERT INTO DEPARTMENT VALUES (1003, '영업팀', '본103호', '053-222-3333');

SELECT * FROM DEPARTMENT;

INSERT INTO EMPLOYEE(EMPID, EMPNAME, HIREDATE, ADDR, TEL, DEPTID) 
VALUES (20121945, '박민수', '2012-03-02', '대구', '010-1111-1234', 1001);
INSERT INTO EMPLOYEE(EMPID, EMPNAME, HIREDATE, ADDR, TEL, DEPTID) 
VALUES (20101817, '박준식', '2010-09-01', '경산', '010-2222-1234', 1003);
INSERT INTO EMPLOYEE(EMPID, EMPNAME, HIREDATE, ADDR, TEL, DEPTID) 
VALUES (20122245, '선아라', '2012-03-02', '대구', '010-3333-1222', 1002);
INSERT INTO EMPLOYEE(EMPID, EMPNAME, HIREDATE, ADDR, TEL, DEPTID) 
VALUES (20121729, '이범수', '2011-03-02', '서울', '010-3333-4444', 1001);
INSERT INTO EMPLOYEE(EMPID, EMPNAME, HIREDATE, ADDR, TEL, DEPTID) 
VALUES (20121646, '이융희', '2012-09-01', '부산', '010-1234-2222', 1003);

SELECT * FROM EMPLOYEE;



/* 9 */
ALTER TABLE EMPLOYEE MODIFY EMPNAME NOT NULL;

DESC EMPLOYEE;

/* 10 */
SELECT EMPNAME, HIREDATE, DEPTID
FROM EMPLOYEE JOIN DEPARTMENT
USING (DEPTID)
WHERE DEPTNAME = '총무팀';

/* 11 */
DELETE FROM EMPLOYEE WHERE ADDR = '대구';

/* 12 */
UPDATE EMPLOYEE SET DEPTID=(SELECT DEPTID FROM DEPARTMENT
WHERE DEPTNAME = '회계팀')
WHERE DEPTID=(SELECT DEPTID FROM DEPARTMENT WHERE DEPTNAME='영업팀');

/* 13 */
SELECT EMPID, EMPNAME, BIRTHDAY, DEPTNAME
FROM EMPLOYEE JOIN DEPARTMENT
USING (DEPTID)
WHERE HIREDATE > (SELECT HIREDATE FROM 
EMPLOYEE WHERE EMPID = 20121729);

/* 14 */
CREATE VIEW EMP_VU_1 
AS SELECT EMPNAME, ADDR, DEPTNAME
FROM EMPLOYEE JOIN DEPARTMENT USING (DEPTID)
WHERE DEPTNAME = '총무팀';

SELECT * FROM EMP_VU_1;

/* SHEET 2 */
/* 1 2002년 이후에 입사한 사람들 중 JOB_ID가 ST_CLERK-인 사원의 모든 데이터 표시 */
SELECT * FROM EMPLOYEES
WHERE HIRE_DATE > TO_DATE('2001-12-31', 'YYYY-MM-DD')
AND JOB_ID = 'ST_CLERK';

SELECT * FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'YYYY') > 2001
AND JOB_ID = 'ST_CLERK';

/* 2  커미션을 받는 사원의 정보를 급여에 대한 내림차순으로 정렬하여 표시 */

SELECT LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC;

/* 3 커미션 받지 않는 사원의 급여 10% 인상하여 표시, 급여는 반올림 처리 */
SELECT CONCAT('The salary of ', LAST_NAME) || CONCAT(' after a 10% raise is ', ROUND(SALARY * 1.1)) AS "New salary"
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

/* 4  모든 사원의 이름, 근무한 년수, 근무한 개월수 반올림하여 표시 */
-- MOD() - REMAINDER OF THE DIVISION
SELECT LAST_NAME, 
    TRUNC((SYSDATE - HIRE_DATE)/365) AS YEARS, 
    TRUNC(MOD(MONTHS_BETWEEN(SYSDATE, HIRE_DATE), 12)) AS MONTHS
FROM EMPLOYEES;

/* 5 이름이 J, K, L, M으로 시작하는 사원 표지 */
-- 1
SELECT LAST_NAME
FROM EMPLOYEES
WHERE LAST_NAME LIKE 'J%' 
    OR LAST_NAME LIKE 'K%'
    OR LAST_NAME LIKE 'L%'
    OR LAST_NAME LIKE 'M%';
    
-- 2
SELECT LAST_NAME
FROM EMPLOYEES
WHERE SUBSTR(LAST_NAME, 1, 1) BETWEEN 'J' AND 'M';

-- 3 
SELECT LAST_NAME
FROM EMPLOYEES
WHERE SUBSTR(LAST_NAME, 1, 1) IN ('J', 'K', 'L', 'M');

-- 4. 정규표현식
SELECT LAST_NAME
FROM EMPLOYEES
WHERE REGEXP_LIKE(LAST_NAME, '^(J|K|L|M)');

/* 6 모든 사원의 커미션 수령 여부 표시 */
-- 1
SELECT LAST_NAME, SALARY, NVL2(COMMISSION_PCT, 'Yes', 'No') COM
FROM EMPLOYEES;

--2 
SELECT LAST_NAME, SALARY, 
    CASE WHEN COMMISSION_PCT IS NULL THEN 'No'
    ELSE 'Yes'
    END AS COM
FROM EMPLOYEES;

--3
SELECT LAST_NAME, SALARY,
    DECODE (COMMISSION_PCT, NULL, 'No',
                                                                'Yes') AS COM
FROM EMPLOYEES;

/* 7 1800 위치 코드에서 근무하는 사원의 정보 표시 */
--1 
SELECT D.DEPARTMENT_NAME, E.LAST_NAME, 
    E.JOB_ID, E.SALARY, L.LOCATION_ID
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID
WHERE L.LOCATION_ID = 1800;

--2 
SELECT D.DEPARTMENT_NAME, 
    D.LOCATION_ID, E.LAST_NAME, E.JOB_ID, E.SALARY
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
WHERE D.LOCATION_ID = 1800;

--3
SELECT DEPARTMENT_NAME, LOCATION_ID, LAST_NAME, JOB_ID, SALARY
FROM EMPLOYEES JOIN DEPARTMENTS
USING (DEPARTMENT_ID)
WHERE LOCATION_ID = 1800;

--4
SELECT DEPARTMENT_NAME, LOCATION_ID, LAST_NAME, JOB_ID, SALARY
FROM EMPLOYEES, DEPARTMENTS
WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
AND LOCATION_ID = 1800;

/* 8 이름이 N으로 끝나는 사원이 몇 명인지 체크 */
SELECT COUNT(*)
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%n';

SELECT COUNT(*)
FROM EMPLOYEES
WHERE SUBSTR(LAST_NAME, -1, 1)  = 'n';

/* 9 모든 부서의 이름, 위치, 각 부서에 근무하는 사원의 수 표시, 사원이 없는 부서도 함께 표시  */
-- 1 join 3-way
SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME, 
    L.LOCATION_ID, COUNT(E.EMPLOYEE_ID)
FROM EMPLOYEES E RIGHT OUTER JOIN DEPARTMENTS D
ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
LEFT OUTER JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID
GROUP BY D.DEPARTMENT_ID, D.DEPARTMENT_NAME, L.LOCATION_ID
ORDER BY D.DEPARTMENT_ID;

-- 2
SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.LOCATION_ID, 
COUNT(E.EMPLOYEE_ID)
FROM EMPLOYEES E RIGHT OUTER JOIN DEPARTMENTS D
ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
GROUP BY D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.LOCATION_ID
ORDER BY D.DEPARTMENT_ID;

--3 ORACLE JOIN
SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.LOCATION_ID,
COUNT(E.EMPLOYEE_ID)
FROM EMPLOYEES E, DEPARTMENTS D
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID(+)
GROUP BY D.DEPARTMENT_ID, D.DEPARTMENT_NAME, D.LOCATION_ID;

/* 10 부서 10과 20에 있는 업무 (JOB_ID) 표시 */
SELECT JOB_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (10, 20);

/* 11 ADMINISTRATION, EXECUTIVE 부서에 있는 업무와 
해당 업무 맞는 사원 수 표시, 인원 가장 많은 업무부터 표시 */
SELECT JOB_ID, COUNT(JOB_ID)
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS 
WHERE DEPARTMENT_NAME IN ('Administration', 'Executive'))
GROUP BY JOB_ID
ORDER BY COUNT(JOB_ID) DESC;

/* 12 매월 상반기 (해당 월의 16일 이전)에 입사한 사원 모두 표시 */
SELECT LAST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'DD') <= 16;

/* 13 모든 사원의 이름, 급여, 달러로 나타낸 급여(천단위)를 표시 */
SELECT LAST_NAME, SALARY, SALARY/1000 AS THOUSANDS
FROM EMPLOYEES;

/* 14 관리자의 급여가 15000를 넘는 모든 사원의 이름을 관리자 이름,
관리자 급여, 관리자 급여 등급과 함께 표시 */
 SELECT E.LAST_NAME, M.LAST_NAME, M.SALARY, G.GRADE_LEVEL AS GRA
 FROM EMPLOYEES E JOIN EMPLOYEES M
 ON E.MANAGER_ID = M.EMPLOYEE_ID
 JOIN JOB_GRADES G
 ON M.SALARY BETWEEN G.LOWEST_SAL AND G.HIGHEST_SAL
 WHERE M.SALARY > 15000;
 
 /* 15 평균 급여가 가장 높은 부서의 부서 번호 및 해당 부서의 최저 급여 표시 */
SELECT DEPARTMENT_ID, MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) = (SELECT MAX(AVG(SALARY)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID);
